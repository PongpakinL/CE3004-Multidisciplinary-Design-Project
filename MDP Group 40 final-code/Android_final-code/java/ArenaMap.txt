package com.example.mdpgroup40;


import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;

import android.graphics.Typeface;
import android.util.AttributeSet;
import android.util.Log;

import android.view.MotionEvent;
import android.view.View;
import android.widget.Toast;

import androidx.annotation.Nullable;

import com.example.mdpgroup40.Bluetooth.BluetoothService;

import java.nio.charset.Charset;
import java.util.ArrayList;

import static com.example.mdpgroup40.MainActivity.messages;

/**
 * The Arena is 2mx2m.
 * Obstacles are 10cmx10cm.
 * Robot is 20cmx20cm.
 * Every grid box should follow obstacle measurements.
 * There will be 5 obstacles in total.
 * Number of rows and columns = 20 by 20.
 * <p>
 * What to draw - handled by Canvas
 * How to draw - handled by Paint
 */

public class ArenaMap extends View {

    private static final String TAG = "Arena Map";

    private static Cell[][] cells;
    private static final int mCols = 20, mRows = 20;
    private static float cellSize, hMargin, vMargin;
    private static String robotDirection = "n";

    //robot
    private static int[] curCoord = new int[]{-1, -1};
    private static int[] oldCoord = new int[]{-1, -1};




    private static ArrayList<Obstacle> obstacleList = new ArrayList<>();

    public static final String north = "n";
    public static final String south = "s";
    public static final String east = "e";
    public static final String west = "w";

    private static Paint wallPaint = new Paint();
    private static Paint robotPaint = new Paint();
    private static Paint directionPaint = new Paint();
    private static Paint obstaclePaint = new Paint();
    private static Paint unexploredPaint = new Paint();
    private static Paint exploredPaint = new Paint();
    private static Paint gridNumberPaint = new Paint();
    private static Paint obstacleNumberPaint = new Paint();

    private static Paint linePaint = new Paint();

    //Create only avail when state is true
    private static boolean createCellStatus = false;
    private static boolean setRobotPostition = false;
    private static boolean changedFaceAnnotation = false;
    private static boolean validPosition = false;
    private static boolean canDrawRobot = false;

    private View mapView;


    private boolean faceChangeEnabled = false;
    private boolean robotDrawn = false;


    public ArenaMap(Context context) {
        super(context);
        init(null);
    }

    public ArenaMap(Context context, @Nullable AttributeSet attrs) {
        super(context, attrs);
        init(attrs);

        wallPaint.setColor(Color.WHITE);
        wallPaint.setStrokeWidth(3);
//        robotPaint.setColor(Color.parseColor("#495ECA"));
//        directionPaint.setColor(Color.BLACK);
        robotPaint.setColor(Color.BLACK);
        directionPaint.setColor(Color.parseColor("#FFA45A"));


        unexploredPaint.setColor(Color.parseColor("#ccd8d7"));
//        exploredPaint.setColor(Color.GRAY);
        exploredPaint.setColor(Color.parseColor("#ccd8d7"));


        obstaclePaint.setColor(Color.BLACK);
        obstaclePaint.setStyle(Paint.Style.FILL);
        obstaclePaint.setStrokeWidth(3f);

        obstacleNumberPaint.setColor(Color.WHITE);
        obstacleNumberPaint.setTextSize(10);
        obstacleNumberPaint.setTypeface(Typeface.DEFAULT_BOLD);
        obstacleNumberPaint.setAntiAlias(true);
        obstacleNumberPaint.setStyle(Paint.Style.FILL);
        obstacleNumberPaint.setTextAlign(Paint.Align.LEFT);

        gridNumberPaint.setColor(Color.BLACK);
        gridNumberPaint.setTextSize(15);
        gridNumberPaint.setStyle(Paint.Style.FILL_AND_STROKE);



        linePaint.setStyle(Paint.Style.STROKE);
        linePaint.setColor(Color.YELLOW);
        linePaint.setStrokeWidth(3f);

        mapView = (View) findViewById(R.id.mapView);


    }

    private void init(@Nullable AttributeSet set) {
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        super.onTouchEvent(event);
        int coordinates[];
        int x = (int) event.getX();
        int y = (int) event.getY();

        //Get touched coordinate
        coordinates = findGridOnTouch(x, y);

        Log.d(TAG, "onTouchEvent: Touched coordinates are " +
                coordinates[0] + " " + coordinates[1]);

        Log.d(TAG, "onTouchEvent: Touched coordinates are " +
                x + " " + y);

        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN:
                //Touch down code
                Log.d(TAG, "onTouchEvent: ACTION_DOWN");
                if(faceChangeEnabled){
                    for (Obstacle obstacles : obstacleList) {
                        //Check if obstacle in touched.
                        if (obstacles.isTouched(x, y) && !obstacles.getActionDown()) {
                            if (obstacles.getTouchCount() >= 5) {//reset face
                                obstacles.resetTouchCount();
                                obstacles.setObsFace(obstacles.getTouchCount());
                            } else {
                                obstacles.incrTouchCount();
                                obstacles.setObsFace(obstacles.getTouchCount());
                            }
                        }


//                        try {
//                            sendBTMessage(obstacles.getObsID(), obstacles.getObsFace());
//                        } catch (Exception e) {
//                            e.printStackTrace();
//                        }
                    }

                }else{
                    //face changed disabled
                    for (int i = 0; i < obstacleList.size(); i++) {
                        if (obstacleList.get(i).isTouched(x, y) && !obstacleList.get(i).getActionDown()) {
                            Log.d(TAG, "onTouchEvent: this is touched--->" + obstacleList.get(i).obsID);
                            Log.d(TAG, "onTouchEvent: Coordinates are " + coordinates[0] + " " + coordinates[1]);

                            obstacleList.get(i).setActionDown(true);

                        }
                    }
                }

                invalidate();

                break;
            case MotionEvent.ACTION_MOVE:
                Log.d(TAG, "onTouchEvent: ACTION_MOVE");


                MainActivity.setXPosition(coordinates[0]);

                if (coordinates[1] == -1) {
                    MainActivity.setYPosition(0);

                }else if(coordinates[1] == 19){
                    MainActivity.setYPosition(1);

                }
                else{
                    MainActivity.setYPosition(20-coordinates[1]);

                }



                //Touch move code move obstacle
                for (Obstacle obstacles : obstacleList) {
                    if (obstacles.getActionDown() && obstacles.isTouched(x, y)) {
                        obstacles.setPosition(x, y); //not set the coordinate
                        invalidate();
                    }
                }
                break;
            case MotionEvent.ACTION_UP:  //release the finger
                Log.d(TAG, "onTouchEvent: ACTION_UP");


                int[] tmpCoord = {-1,-1};
                tmpCoord[0] = coordinates[0];

                if (coordinates[1] == -1) {
                    MainActivity.setYPosition(0);
                    tmpCoord[1]=0;
                }else if(coordinates[1] == 19){
                    MainActivity.setYPosition(1);
                    tmpCoord[1]=1;
                }
                else{
                    MainActivity.setYPosition(20-coordinates[1]);
                    tmpCoord[1]=20-coordinates[1];
                }


                boolean removed=false;
                for (Obstacle obstacles : obstacleList) {
                    if (obstacles.getActionDown()&& obstacles.isTouched(x, y)) {
                        if (isInArena(coordinates)) {
                            obstacles.setObsCoordinate(tmpCoord);
                            obstacles.setPosition(x, y); //not set the coordinate
//                            try {
//                                sendBTMessage(obstacles.getObsID(), tmpCoord);
//                            } catch (Exception e) {
//                                e.printStackTrace();
//                            }

                        } else {
                            // Out of bounce = remove obstacle
                            updateObstacles(Integer.parseInt(obstacles.getObsID()));
                            removed = true;
                        }
                    }

                    obstacles.setActionDown(false);

                    invalidate();

                    if(removed==true) break;
                }

                break;
        }

        //draw robot
        if (setRobotPostition) {
            if (isInArena(coordinates)) {
                if ((coordinates[0] != 0 && coordinates[0] != 19) && (coordinates[1] != 0 && coordinates[1] != 19)) {
                    //Robot's currenr position is set
                    setCurCoord(coordinates[0], coordinates[1]);

                    invalidate();
                }
//                try {
//                    sendBTRobotDirection("north");
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
            }
        }

        Log.d(TAG, "onTouchEvent: Exiting onTouchEvent");
        //Must be true, else it will only call ACTION_DOWN
        return true;

    }



    private void updateObstacles(int id) {
        if (id == obstacleList.size()) {
            obstacleList.remove(obstacleList.size() - 1);

            //need to send BT
//            try {
//                sendBTMessage(Integer.toString(id));
//            } catch (Exception e) {
//                e.printStackTrace();
//            }

            return;
        }//remove last object

        //if removed is not last object
        obstacleList.remove(id-1);

        //need to send BT
//        try {
//            sendBTMessage(Integer.toString(id));
//        } catch (Exception e) {
//            e.printStackTrace();
//        }

        for (int i = id - 1; i < obstacleList.size(); i++) {
            obstacleList.get(i).setObsID(String.valueOf(i+1));
            obstacleList.get(i).setTargetID(String.valueOf(i+1));

//            try {
//                sendBTMessage(obstacleList.get(i).getObsID(), obstacleList.get(i).getObsFace());
//            } catch (Exception e) {
//                e.printStackTrace();
//            }


        }


    }


    //Create Cell method
    private void createCells() {
        cells = new Cell[mCols][mRows];
        for (int x = 0; x < mCols; x++) {
            for (int y = 0; y < mRows; y++) {

                cells[x][y] = new Cell(x * cellSize + (cellSize / 30),
                        y * cellSize + (cellSize / 30),
                        (x + 1) * cellSize - (cellSize / 40),
                        (y + 1) * cellSize - (cellSize / 60), unexploredPaint);


            }
        }
    }

    //Draw shapes on the canvas
    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);

        //Set width and height of the canvas
        int width = getWidth();
        int height = getHeight();

        Log.d(TAG, "Width and Height: " + width + height);



        cellSize = height / (mRows);
        Log.d(TAG, "Cell size : " + cellSize);

        //Create cell at the start only. Create cell and draw cell is different. draw cell is to update the cell
        if (!createCellStatus) {
            //Create cell coordincates
            createCells();
            createCellStatus = true;
        }

        //Set Margin
        hMargin=25;
        vMargin=0;
        canvas.translate(hMargin, vMargin);

        drawBorder(canvas);
        drawCell(canvas);
        drawGridNumber(canvas);
        drawRobot(canvas);


        //draw obstacles
        for (Obstacle obstacles : obstacleList) {



            canvas.drawRect(obstacles.x, obstacles.y, obstacles.x + 31, obstacles.y + 31, obstacles.obstaclePaint);   //draw black box

            canvas.drawText(obstacles.getTargetID(), obstacles.getObsX() + 9, obstacles.getObsY() + 21, obstacles.obstacleNumberPaint);   //draw the text

            obstacles.drawObsFace(canvas, obstacles.getTouchCount(), linePaint);
        }


    }

    //Draw individual cell to update the cell whether explored anot
    private void drawCell(Canvas canvas) {
        //Log.d(TAG, "drawCell(): in drawCell");
        for (int x = 0; x < mCols; x++) {
            for (int y = 0; y < mRows; y++) {
                //Draw cells
                canvas.drawRect(cells[x][y].startX, cells[x][y].startY, cells[x][y].endX, cells[x][y].endY, cells[x][y].paint);
            }
        }
    }

    //Draw border for each cell
    private void drawBorder(Canvas canvas) {
        for (int x = 0; x < mCols; x++) {
            for (int y = 0; y < mRows; y++) {
                //Top
                canvas.drawLine(x * cellSize, y * cellSize, (x + 1) * cellSize, y * cellSize, wallPaint);
                //Right
                canvas.drawLine((x + 1) * cellSize, y * cellSize, (x + 1) * cellSize, (y + 1) * cellSize, wallPaint);
                //Left
                canvas.drawLine(x * cellSize, y * cellSize, x * cellSize, (y + 1) * cellSize, wallPaint);
                //Bottom
                canvas.drawLine(x * cellSize, (y + 1) * cellSize, (x + 1) * cellSize, (y + 1) * cellSize, wallPaint);
            }
        }
    }

    //Draw robot on canvas
    private void drawRobot(Canvas canvas) {
        Log.d(TAG, "Drawing Robot");
        int robotCoordinates[] = getCurCoord();
        int x = robotCoordinates[0];
        int y = robotCoordinates[1];
        String direction = getRobotDirection();

        if (x != -1 && y != -1) {
            float halfWidth = ((cells[x][y - 1].endX) - (cells[x][y - 1].startX)) / 2;

            //row and col is the middle of the robot
            Log.d(TAG, "drawRobot: Coordinates are= " + x + " , " + inverseCoordinates(y));

            //Draw Robot box
            canvas.drawRect(cells[x][y].startX, cells[x][y].startY, cells[x][y].endX, cells[x][y].endY, robotPaint);
            canvas.drawRect(cells[x][y - 1].startX, cells[x][y - 1].startY, cells[x][y - 1].endX, cells[x][y - 1].endY, robotPaint);
            canvas.drawRect(cells[x + 1][y].startX, cells[x + 1][y].startY, cells[x + 1][y].endX, cells[x + 1][y].endY, robotPaint);
            canvas.drawRect(cells[x - 1][y].startX, cells[x - 1][y].startY, cells[x - 1][y].endX, cells[x - 1][y].endY, robotPaint);
            canvas.drawRect(cells[x + 1][y - 1].startX, cells[x + 1][y - 1].startY, cells[x + 1][y - 1].endX, cells[x + 1][y - 1].endY, robotPaint);
            canvas.drawRect(cells[x - 1][y - 1].startX, cells[x - 1][y - 1].startY, cells[x - 1][y - 1].endX, cells[x - 1][y - 1].endY, robotPaint);
            canvas.drawRect(cells[x][y + 1].startX, cells[x][y + 1].startY, cells[x][y + 1].endX, cells[x][y + 1].endY, robotPaint);
            canvas.drawRect(cells[x + 1][y + 1].startX, cells[x + 1][y + 1].startY, cells[x + 1][y + 1].endX, cells[x + 1][y + 1].endY, robotPaint);
            canvas.drawRect(cells[x - 1][y + 1].startX, cells[x - 1][y + 1].startY, cells[x - 1][y + 1].endX, cells[x - 1][y + 1].endY, robotPaint);

            //Robot direction (Arrow)
            Path path = new Path();
            Log.d(TAG, "Robot direction: " + direction);


            switch (direction) {
                case north:
                    path.moveTo(cells[x][y - 1].startX + halfWidth, cells[x][y].startY); // Top
                    path.lineTo(cells[x][y - 1].startX, cells[x][y].endY); // Bottom left
                    path.lineTo(cells[x][y - 1].endX, cells[x][y].endY); // Bottom right
                    path.lineTo(cells[x][y - 1].startX + halfWidth, cells[x][y].startY); // Back to Top
                    break;
                case south:
                    path.moveTo(cells[x][y + 1].endX - halfWidth, cells[x][y].endY); // Top
                    path.lineTo(cells[x][y + 1].startX, cells[x][y].startY); // Bottom left
                    path.lineTo(cells[x + 1][y + 1].startX, cells[x + 1][y].startY); // Bottom right
                    path.lineTo(cells[x][y + 1].endX - halfWidth, cells[x][y].endY); // Back to Top
                    break;
                case east:
                    path.moveTo(cells[x][y].startX + (2 * halfWidth), cells[x][y].startY + halfWidth); // Top
                    path.lineTo(cells[x][y].startX, cells[x + 1][y].startY); // Bottom left
                    path.lineTo(cells[x][y + 1].startX, cells[x + 1][y + 1].startY); // Bottom right
                    path.lineTo(cells[x][y].startX + (2 * halfWidth), cells[x][y].startY + halfWidth); // Back to Top
                    break;
                case west:
                    path.moveTo(cells[x][y].startX, cells[x][y].startY + halfWidth); // Top
                    path.lineTo(cells[x+1][y].startX, cells[x][y].startY); // Bottom left
                    path.lineTo(cells[x+1][y + 1].startX, cells[x][y + 1].startY); // Bottom right
                    path.lineTo(cells[x][y].startX, cells[x][y].startY + halfWidth); // Back to Top
                    break;
            }
            path.close();
            canvas.drawPath(path, directionPaint);

            //After drawing, set drawing to false
            setRobotPostition = false;
            MainActivity.setRobotDetails(x, inverseCoordinates(y), direction);
        }
    }


    //Draw axis numbers
    private void drawGridNumber(Canvas canvas) {
        //Row
        for (int x = 0; x < 20; x++) {
            if (x > 9 && x < 20) {
                canvas.drawText(Integer.toString(x), cells[x][19].startX + (cellSize / 5), cells[x][19].endY + (cellSize / 1.5f), gridNumberPaint);
            } else {
                canvas.drawText(Integer.toString(x), cells[x][19].startX + (cellSize / 3), cells[x][19].endY + (cellSize / 1.5f), gridNumberPaint);
            }
        }
        //Column
        for (int x = 0; x <20; x++) {
            if(x >9 && x <20){
                canvas.drawText(Integer.toString(19 - x), cells[0][x].startX - (cellSize / 1.5f), cells[0][x].endY - (cellSize / 3.5f), gridNumberPaint);
            } else {
                canvas.drawText(Integer.toString(19 - x), cells[0][x].startX - (cellSize / 1.2f), cells[0][x].endY - (cellSize / 3.5f), gridNumberPaint);
            }
        }
    }

    //Inverting rows
    private int inverseCoordinates(int y) {
        return (19 - y);
    }


//    target,1,10
//    robot,4,3,e
//    status,moving


    public void updateMap(String message) throws Exception {
        Log.d(TAG, "updateMap: Updating Map!");

        String receivedMessage[] = message.split(",");
        String item = receivedMessage[0];
        int x, y;
        String obsID, targetID;
        String direction, movement;

        switch (item.toUpperCase()) {
            case "TARGET":
                //Update obstacle by displaying image ID
                obsID = receivedMessage[1];
                targetID = receivedMessage[2];

                updateTargetText(obsID, targetID);
                break;
            case "ROBOT":
                //Get new robot position
                x = Integer.valueOf(receivedMessage[1]);
                y = inverseCoordinates(Integer.valueOf(receivedMessage[2]));
                direction = receivedMessage[3];

                Log.d(TAG, "New coordinates: " + x + "," + y);
                Log.d(TAG, "Direction " + direction);

                moveRobot(x, y, direction);
                MainActivity.setRobotDetails(x, y, direction);
                invalidate();

                break;
            case "MOVE":
                //Get robot movement
                movement = receivedMessage[1];
                Log.d(TAG, "updateMap: Move " + movement);

                moveRobot(movement);
                break;

            case "STATUS":
                MainActivity.setRobotStatus(receivedMessage[1]);

        }
    }

    private void updateTargetText(String obsID, String targetID) {
        //Go through list of obstacles
        String ID;
        for (Obstacle obstacles : obstacleList) {
            ID = obstacles.getObsID();
            if (ID.equals(obsID)) {
                Log.d(TAG, "obsID: " + obsID);
                Log.d(TAG, "targetID: " + targetID);
                obstacles.setTargetID(targetID);
                obstacles.updateObsPaint();

            }
        }
        invalidate();
    }

    public void addObstacle() {
        obstacleList.add(new Obstacle(625, 35, Integer.toString(ArenaMap.obstacleList.size() + 1), 0, "x", Integer.toString(ArenaMap.obstacleList.size() + 1)));
        invalidate();
    }
    public ArrayList<Obstacle> getObstacleList() {
        return obstacleList;
    }
    //Resetting Arena by resetting everything
    public void resetArena(){
        setStartingPoint(false);
        obstacleList.clear();
        curCoord = new int [] {-1, -1};
        robotDirection = north;
        createCellStatus = false;

        robotDrawn = false;

        MainActivity.setRobotDetails(-1, -1, "north");
        MainActivity.setXPosition(0);
        MainActivity.setYPosition(0);


        String sentText = "Map Reset";
        try {
            byte[] bytes = sentText.getBytes(Charset.defaultCharset());
            BluetoothConnectionService.write(bytes);
            messages.append(sentText + "\n");
            MainActivity.incomingMessages.setText(messages);
        }catch (Exception e){
            Toast.makeText(getContext(), "Make sure Bluetooth is connected", Toast.LENGTH_SHORT).show();
        }



        invalidate();
    }


    private boolean isInArena(int touchedCoord[]) {
        //Check if coordinates is within the Arena
        Log.d(TAG, "isInArena: Check if touched coordinates is within the Arena");
        boolean isInArena = false;

        //If in Arena, return true
        if (touchedCoord[0] != -1 && touchedCoord[1] != -1) {
            isInArena = true;
        } else if (touchedCoord[0] != -1 && touchedCoord[1] == -1) {
            isInArena = true;
        }

        return isInArena;
    }


    /**
     * Change color of the obstacle to indicate face of the image
     * Black: Default, Green: Left, Red: Right, Yellow: Down, Blue: Front
     * Need to attach count to the object
     *
     * @return
     */


    //Find coordinates of cell in arena
    public static int[] findGridOnTouch(float x, float y) {
        int row = -1, cols = -1;
        //FIND COLS OF THE MAZE BASED ON ONTOUCH
        for (int i = 0; i < mCols; i++) {
            if (cells[i][0].endX >= (x - hMargin) && cells[i][0].startX <= (x - hMargin)) {
                cols = i;
                break;
            }
        }
        //FIND ROW OF THE MAZE BASED ON ONTOUCH
        for (int j = 0; j < mRows; j++) {
            if (cells[0][j].endY >= (y - vMargin) && cells[0][j].startY <= (y - vMargin)) {
                row = j;
                break;
            }
        }
        return new int[]{cols, row};
    }


    //Get current robot Coordinates
    public int[] getCurCoord() {
        return curCoord;

    }

    public void setRobotDirection(String direction) {
        Log.d(TAG, "setRobotDirection");
        if (direction.equals("0")) {
            robotDirection = north;
        } else if (direction.equals("90")) {
            robotDirection = east;
        } else if (direction.equals("180")) {
            robotDirection = south;
        } else if (direction.equals("270")) {
            robotDirection = west;
        }

        Log.d(TAG, robotDirection);
    }

    public String getRobotDirection() {
        return robotDirection;
    }

    //Allow user to set Robot position
    public void setStartingPoint(boolean status) {
        //set to true

        if(!robotDrawn){
            Toast.makeText(getContext(), "Draw Robot Enabled", Toast.LENGTH_SHORT).show();
            canDrawRobot = status;
            setRobotPostition = status;
            robotDrawn = true;
        }
        else{
            Toast.makeText(getContext(),"Robot is already drawn",Toast.LENGTH_SHORT).show();
        }

    }


    // Move robot upon robot position
    public void moveRobot(int x, int y, String direction) {
        Log.d(TAG, "Moving robot");
//        setValidPosition(false);

        String backupDirection = robotDirection;
        int oldCoord[] = this.getCurCoord();

        Log.d(TAG, "onMoveRobot: Old coordinates are " + oldCoord[0] + "," + oldCoord[1]);

        if ((oldCoord[0] == -1) && (oldCoord[1] == -1)) {
            //Set initial coordinates as old Coordinate
            if (((x != 0 && x != 19) && (y != 0 && y != 19))) {
                //If robot not drawn yet, draw it.
                setCurCoord(x, y);
               // setRobotDirection(direction);
                robotDirection = direction;
                setStartingPoint(true);
            } else {
                Toast.makeText(getContext(), "Area out of bounce!", Toast.LENGTH_SHORT).show();
            }
        } else {
            setOldRobotCoord(oldCoord[0], oldCoord[1]);
            if ((x != 0 && x != 19) && (y != 0 && y != 19)) {
                //Set new coordinates as current coordinates
                setCurCoord(x, y);
                //setRobotDirection(direction);
                robotDirection = direction;

            } else {
                Toast.makeText(getContext(), "Area out of bounce!", Toast.LENGTH_SHORT).show();
                setCurCoord(oldCoord[0], oldCoord[1]);
                setRobotDirection(backupDirection);
            }
        }
        invalidate();
    }

    //Move robot upon WASD
    public void moveRobot(String movement) throws Exception{
        Log.d(TAG, "Entering moveRobot");
        setValidPosition(false);

        int[] oldCoord = this.getCurCoord();
        String currDirection = getRobotDirection();
        String backupDirection = getRobotDirection();

        int x = oldCoord[0];
        int y = oldCoord[1];

        Log.d(TAG, "onMoveRobot: Current coordinates => " + oldCoord[0] + "," + oldCoord[1]);
        Log.d(TAG, "onMoveRobot: Current Robot direction => " + currDirection);

//        Robot movement depends on the arrow/direction of the robot.
        switch (currDirection) {
            case north:
                //Ensure that center of the body is within this area
                if ((x != 0 && x != 19) && (y != 0 && y != 19)) {
                    validPosition = true;
                }
                switch (movement) {
                    case "w": //"forward"
                        if (curCoord[1] != 1) {
                            curCoord[1] -= 1;
                            validPosition = true;
                            Toast.makeText(getContext(), "Robot: Moving Forward", Toast.LENGTH_LONG).show();
                        } else {
                            setValidPosition(false);
                        }
                        break;
                    case "d": //"right"
                        robotDirection = east;
                        Toast.makeText(getContext(), "Robot: Turning Right", Toast.LENGTH_LONG).show();
                        break;
                    case "s": //"back"
                        if (curCoord[1] != 18) {
                            curCoord[1] += 1;
                            validPosition = true;
                            Toast.makeText(getContext(), "Robot: Reverse", Toast.LENGTH_LONG).show();
                        } else {
                            setValidPosition(false);
                        }
                        break;
                    case "a": //"left"
                        robotDirection = west;
                        Toast.makeText(getContext(), "Robot: Turning Left", Toast.LENGTH_LONG).show();
                        break;
                    default:
                        robotDirection = "error up";
                        Toast.makeText(getContext(), "Robot: Reverse", Toast.LENGTH_LONG).show();
                        break;
                }
                break;
            case "90":
            case east:
                switch (movement) {
                    case "w":
                        if (curCoord[0] != 18) {
                            curCoord[0] += 1;
                            validPosition = true;
                            Toast.makeText(getContext(), "Robot: Moving Forward", Toast.LENGTH_LONG).show();
                        } else {
                            setValidPosition(false);
                        }
                        break;
                    case "d":
                        robotDirection = south;
                        Toast.makeText(getContext(), "Robot: Turning Right", Toast.LENGTH_LONG).show();
                        break;
                    case "s":
                        if (curCoord[0] != 1) {
                            curCoord[0] -= 1;
                            validPosition = true;
                            Toast.makeText(getContext(), "Robot: Reverse", Toast.LENGTH_LONG).show();
                        } else {
                            setValidPosition(false);
                        }
                        break;
                    case "a":
                        robotDirection = north;
                        Toast.makeText(getContext(), "Robot: Turning Left", Toast.LENGTH_LONG).show();
                        break;
                    default:
                        robotDirection = "error right";
                }
                break;
            case "180":
            case south:
                switch (movement) {
                    case "w":
                        if (curCoord[1] != 18) {
                            curCoord[1] += 1;
                            validPosition = true;
                            Toast.makeText(getContext(), "Robot: Moving Forward", Toast.LENGTH_LONG).show();
                        } else {
                            setValidPosition(false);
                        }
                        break;
                    case "d":
                        robotDirection = west;
                        Toast.makeText(getContext(), "Robot: Turning Right", Toast.LENGTH_LONG).show();
                        break;
                    case "s":
                        if (curCoord[1] != 1) {
                            curCoord[1] -= 1;
                            validPosition = true;
                            Toast.makeText(getContext(), "Robot: Reverse", Toast.LENGTH_LONG).show();
                        } else {
                            setValidPosition(false);
                        }
                        break;
                    case "a":
                        robotDirection = east;
                        Toast.makeText(getContext(), "Robot: Turning Left", Toast.LENGTH_LONG).show();
                        break;
                    default:
                        robotDirection = "error down";
                }
                break;
            case "270":
            case west:
                switch (movement) {
                    case "w":
                        if (curCoord[0] != 1) {
                            curCoord[0] -= 1;
                            validPosition = true;
                            Toast.makeText(getContext(), "Robot: Moving Forward", Toast.LENGTH_LONG).show();
                        } else {
                            setValidPosition(false);
                        }
                        break;
                    case "d":
                        robotDirection = north;
                        Toast.makeText(getContext(), "Robot: Turning Right", Toast.LENGTH_LONG).show();
                        break;
                    case "s":
                        if (curCoord[0] != 18) {
                            curCoord[0] += 1;
                            validPosition = true;
                            Toast.makeText(getContext(), "Robot: Reverse", Toast.LENGTH_LONG).show();
                        } else {
                            setValidPosition(false);
                        }
                        break;
                    case "a":
                        robotDirection = south;
                        Toast.makeText(getContext(), "Robot: Turning Left", Toast.LENGTH_LONG).show();
                        break;
                    default:
                        robotDirection = "error left";
                }
                break;
            default:
                robotDirection = "error moveCurCoord";
                break;
        }

        if (getValidPosition()) {
            Log.d(TAG, String.valueOf(getValidPosition()));
            Log.d(TAG, "onMoveRobot: Curr Coord is " + curCoord[0] + "," + curCoord[1]);
            setCurCoord(curCoord[0], curCoord[1]);
            setOldRobotCoord(x, y);
        } else {
            if (movement.equals("w") || movement.equals("s")) {
                robotDirection = backupDirection;
                setCurCoord(oldCoord[0], oldCoord[1]);
            }
            Log.d(TAG, "onMoveRobot: Old coordinates are " + oldCoord[0] + "," + oldCoord[1]);
        }

//        try {
//            sendBTRobotDirection(robotDirection);
//        } catch (Exception e) {
//            e.printStackTrace();
//        }

        this.invalidate();
        Log.d(TAG, "Robot has been moved");
    }

    public void setCurCoord(int col, int row) {
        Log.d(TAG, "Entering setCurCoord");
        curCoord[0] = col;
        curCoord[1] = row;

        Log.d(TAG, col + "," + row);

        for (int x = col - 1; x <= col + 1; x++)
            for (int y = curCoord[1] - 1; y <= curCoord[1] + 1; y++)
                cells[x][y].setType("robot");
        Log.d(TAG, "Exiting setCurCoord");
    }

    private void setOldRobotCoord(int oldCol, int oldRow) {
        Log.d(TAG, "Entering setOldRobotCoord");
        oldCoord[0] = oldCol;
        oldCoord[1] = oldRow;

        Log.d(TAG, oldCol + "," + oldRow);

        //oldRow = this.inverseCoordinates(oldRow);
        for (int x = oldCoord[0] - 1; x <= oldCoord[0] + 1; x++) {
            for (int y = oldCoord[1] - 1; y <= oldCoord[1] + 1; y++) {
                cells[x][y].setType("explored");
            }
        }
        Log.d(TAG, "Exiting setOldRobotCoord");
    }


    private void setValidPosition(boolean status) {
        validPosition = status;
    }

    private boolean getValidPosition() {
        return validPosition;
    }


    private class Cell {
        float startX, startY, endX, endY;
        Paint paint;
        String type;

        private Cell(float startX, float startY, float endX, float endY, Paint paint) {
            this.startX = startX;
            this.startY = startY;
            this.endX = endX;
            this.endY = endY;
            this.paint = paint;
        }

        public void setType(String type) {
            this.type = type;
            switch (type) {
                case "obstacle":
                    this.paint = obstaclePaint;
                    break;
                case "robot":
                    this.paint = robotPaint;
                    break;
                case "unexplored":
                    this.paint = unexploredPaint;
                    break;
                case "explored":
                    this.paint = exploredPaint;
                    break;
                case "arrow":
                    this.paint = directionPaint;
                    break;
                case "id":
                    this.paint = obstacleNumberPaint;
                    break;
                default:
                    Log.d(TAG, "setType default: " + type);
                    break;
            }
        }
    }

    public void setObstacleFace() {
        Log.d(TAG, "setObstacleFace");

        //toggle face change enabled
        faceChangeEnabled = !faceChangeEnabled;

        if (!faceChangeEnabled) {
            Toast.makeText(getContext(), "Face annotation disabled", Toast.LENGTH_LONG).show();

        } else {
            Toast.makeText(getContext(), "Face annotation enabled", Toast.LENGTH_LONG).show();
        }

        invalidate();
    }

    //send BT
//    private void sendBTMessage(String id, String obsFace) throws Exception{
//        String sentText = id + ":\t" + obsFace;
//        byte[] bytes = sentText.getBytes(Charset.defaultCharset());
//        BluetoothConnectionService.write(bytes);
//
//        messages.append(sentText + "\n");
//        MainActivity.incomingMessages.setText(messages);
//    }
//
//    private void sendBTMessage(String id, int[] coord) throws Exception{
//        String sentText = id + ":" + "\tx:" + String.valueOf(coord[0]) + "\ty:" + String.valueOf(coord[1]);
//        byte[] bytes = sentText.getBytes(Charset.defaultCharset());
//        BluetoothConnectionService.write(bytes);
//
//        messages.append(sentText + "\n");
//        MainActivity.incomingMessages.setText(messages);
//    }
//
//    private void sendBTMessage(String id) throws  Exception{
//        String sentText = id + ": Removed";
//        byte[] bytes = sentText.getBytes(Charset.defaultCharset());
//        BluetoothConnectionService.write(bytes);
//
//        messages.append(sentText + "\n");
//        MainActivity.incomingMessages.setText(messages);
//    }
//    private void sendBTRobotDirection(String robotDirection) throws Exception{
//        String sentText = robotDirection;
//        byte[] bytes = sentText.getBytes(Charset.defaultCharset());
//        BluetoothConnectionService.write(bytes);
//
//        messages.append(sentText + "\n");
//        MainActivity.incomingMessages.setText(messages);
//    }



}
